{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\james\\\\logicGatesFullStack\\\\logicGates\\\\src\\\\teacher.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Teacher extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default Teacher;","map":{"version":3,"sources":["C:/Users/james/logicGatesFullStack/logicGates/src/teacher.js"],"names":["React","Component","axios","Teacher","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Teacher extends Component {\r\n  // initialize our state\r\n  state = {\r\n    data: [],\r\n    id: 0,\r\n    message: null,\r\n    intervalIsSet: false,\r\n    idToDelete: null,\r\n    idToUpdate: null,\r\n    objectToUpdate: null,\r\n  };\r\n\r\n  // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has\r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n  // never let a process live forever\r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n\r\n  // just a note, here, in the front end, we use the id key of our data object\r\n  // in order to identify which we want to Update or delete.\r\n  // for our back end, we use the object id assigned by MongoDB to modify\r\n  // data base entries\r\n\r\n  // our first get method that uses our backend api to\r\n  // fetch data from our data base\r\n  getDataFromDb = () => {\r\n    fetch('http://localhost:3001/api/getData')\r\n      .then((data) => data.json())\r\n      .then((res) => this.setState({ data: res.data }));\r\n  };\r\n\r\n  // our put method that uses our backend api\r\n  // to create new query into our data base\r\n  putDataToDB = (message) => {\r\n    let currentIds = this.state.data.map((data) => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n\r\n    axios.post('http://localhost:3001/api/putData', {\r\n      id: idToBeAdded,\r\n      message: message,\r\n    });\r\n  };\r\n\r\n  // our delete method that uses our backend api\r\n  // to remove existing database information\r\n  deleteFromDB = (idTodelete) => {\r\n    parseInt(idTodelete);\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id === idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete('http://localhost:3001/api/deleteData', {\r\n      data: {\r\n        id: objIdToDelete,\r\n      },\r\n    });\r\n  };\r\n\r\n  // our update method that uses our backend api\r\n  // to overwrite existing data base information\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    parseInt(idToUpdate);\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id === idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post('http://localhost:3001/api/updateData', {\r\n      id: objIdToUpdate,\r\n      update: { message: updateToApply },\r\n    });\r\n  };\r\n\r\n  // here is our UI\r\n  // it is easy to understand their functions when you\r\n  // see them render into our screen\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div>\r\n        <ul>\r\n          {data.length <= 0\r\n            ? 'NO DB ENTRIES YET'\r\n            : data.map((dat) => (\r\n                <li style={{ padding: '10px' }} key={data.message}>\r\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\r\n                  <span style={{ color: 'gray' }}> data: </span>\r\n                  {dat.message}\r\n                </li>\r\n              ))}\r\n        </ul>\r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => this.setState({ message: e.target.value })}\r\n            placeholder=\"add something in the database\"\r\n            style={{ width: '200px' }}\r\n          />\r\n          <button onClick={() => this.putDataToDB(this.state.message)}>\r\n            ADD\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\r\n            placeholder=\"put id of item to delete here\"\r\n          />\r\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n            DELETE\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: '10px' }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\r\n            placeholder=\"id of item to update here\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: '200px' }}\r\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\r\n            placeholder=\"put new value of the item here\"\r\n          />\r\n          <button\r\n            onClick={() =>\r\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n            }\r\n          >\r\n            UPDATE\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Teacher;"]},"metadata":{},"sourceType":"module"}